From 8dbd4063a57433bf11f3d49391978be9d307492c Mon Sep 17 00:00:00 2001
From: Ji Bin <matrixji@live.com>
Date: Wed, 7 Jun 2023 22:10:47 +0800
Subject: [PATCH 1/3] patch for milvus lite

Signed-off-by: Ji Bin <matrixji@live.com>
---
 go.mod                                          |  1 -
 go.sum                                          |  2 --
 internal/core/CMakeLists.txt                    |  8 +++++---
 internal/core/src/common/Utils.h                |  4 ++++
 internal/core/src/index/ScalarIndexSort-inl.h   |  2 +-
 internal/core/src/index/StringIndexMarisa.cpp   |  2 +-
 internal/core/src/index/Utils.cpp               | 16 ++++++++--------
 internal/core/src/index/VectorDiskIndex.cpp     |  2 +-
 internal/core/src/index/VectorMemIndex.cpp      |  2 +-
 internal/core/src/indexbuilder/CMakeLists.txt   |  1 +
 internal/core/src/segcore/CMakeLists.txt        |  1 +
 internal/core/src/segcore/Utils.cpp             |  2 +-
 internal/core/src/storage/CMakeLists.txt        |  7 ++++++-
 internal/core/src/storage/DataCodec.cpp         |  2 +-
 .../core/src/storage/DiskFileManagerImpl.cpp    | 15 +++++++++++----
 internal/core/src/storage/FileManager.h         | 12 +++++++++---
 internal/core/src/storage/LocalChunkManager.cpp |  4 ++++
 .../core/src/storage/MemFileManagerImpl.cpp     |  8 +++++---
 internal/core/src/storage/MinioChunkManager.cpp |  5 +++++
 internal/core/src/storage/MinioChunkManager.h   |  2 ++
 .../src/storage/RemoteChunkManagerFactory.h     |  3 ++-
 internal/core/src/storage/Util.cpp              | 17 ++++++++++++++---
 internal/core/thirdparty/aws_sdk/CMakeLists.txt | 17 +++++++++++++++++
 .../core/thirdparty/knowhere/CMakeLists.txt     |  1 +
 internal/util/etcd/etcd_server.go               | 16 ++++++++++++++++
 internal/util/funcutil/func.go                  | 12 ++++++++++--
 .../util/indexcgowrapper/build_index_info.go    |  2 +-
 internal/util/paramtable/grpc_param.go          |  4 ++--
 scripts/core_build.sh                           |  9 +++++----
 scripts/install_deps.sh                         | 15 ++++-----------
 scripts/install_deps_msys.sh                    | 11 +++++++----
 scripts/setenv.sh                               |  1 +
 32 files changed, 147 insertions(+), 59 deletions(-)

diff --git a/go.mod b/go.mod
index ed327166b..f73846d82 100644
--- a/go.mod
+++ b/go.mod
@@ -18,7 +18,6 @@ require (
 	github.com/confluentinc/confluent-kafka-go v1.9.1
 	github.com/containerd/cgroups v1.0.2
 	github.com/gin-gonic/gin v1.9.0
-	github.com/go-basic/ipv4 v1.0.0
 	github.com/gofrs/flock v0.8.1
 	github.com/golang/protobuf v1.5.2
 	github.com/google/btree v1.0.1
diff --git a/go.sum b/go.sum
index aa8c022fa..0fc17abad 100644
--- a/go.sum
+++ b/go.sum
@@ -233,8 +233,6 @@ github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE
 github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
 github.com/gin-gonic/gin v1.9.0 h1:OjyFBKICoexlu99ctXNR2gg+c5pKrKMuyjgARg9qeY8=
 github.com/gin-gonic/gin v1.9.0/go.mod h1:W1Me9+hsUSyj3CePGrd1/QrKJMSJ1Tu/0hFEH89961k=
-github.com/go-basic/ipv4 v1.0.0 h1:gjyFAa1USC1hhXTkPOwBWDPfMcUaIM+tvo1XzV9EZxs=
-github.com/go-basic/ipv4 v1.0.0/go.mod h1:etLBnaxbidQfuqE6wgZQfs38nEWNmzALkxDZe4xY8Dg=
 github.com/go-fonts/dejavu v0.1.0/go.mod h1:4Wt4I4OU2Nq9asgDCteaAaWZOV24E+0/Pwo0gppep4g=
 github.com/go-fonts/latin-modern v0.2.0/go.mod h1:rQVLdDMK+mK1xscDwsqM5J8U2jrRa3T0ecnM9pNujks=
 github.com/go-fonts/liberation v0.1.1/go.mod h1:K6qoJYypsmfVjWg8KOVDQhLc8UDgIK2HYqyqAO9z7GY=
diff --git a/internal/core/CMakeLists.txt b/internal/core/CMakeLists.txt
index c82c4deef..67bcd4000 100644
--- a/internal/core/CMakeLists.txt
+++ b/internal/core/CMakeLists.txt
@@ -19,19 +19,21 @@ cmake_minimum_required( VERSION 3.18 )
 if ( APPLE )
     set( CMAKE_CROSSCOMPILING TRUE )
     set( RUN_HAVE_GNU_POSIX_REGEX 0 )
-    set( CMAKE_C_COMPILER "/usr/local/opt/llvm/bin/clang" )
-    set( CMAKE_CXX_COMPILER "/usr/local/opt/llvm/bin/clang++" )
 endif ()
 
 add_definitions(-DELPP_THREAD_SAFE)
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
+if ( MSYS )
+    add_definitions(-DPROTOBUF_USE_DLLS)
+endif ()
+
 message( STATUS "Building using CMake version: ${CMAKE_VERSION}" )
 
 project(core)
 include(CheckCXXCompilerFlag)
 if ( APPLE )
     message(STATUS "==============Darwin Environment==============")
-    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/usr/local/opt/llvm/include -I/usr/local/include -I/usr/local/opt/libomp/include -L/usr/local/opt/libomp/lib")
 elseif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
     message(STATUS "==============Linux Environment===============")
     set(LINUX TRUE)
diff --git a/internal/core/src/common/Utils.h b/internal/core/src/common/Utils.h
index fe3fccba1..af4cb5837 100644
--- a/internal/core/src/common/Utils.h
+++ b/internal/core/src/common/Utils.h
@@ -20,7 +20,11 @@
 #include <string>
 
 #include <fcntl.h>
+#ifdef __MINGW64__
+#include <annoy/src/mman.h>
+#else
 #include <sys/mman.h>
+#endif
 
 #include "common/Consts.h"
 #include "common/FieldMeta.h"
diff --git a/internal/core/src/index/ScalarIndexSort-inl.h b/internal/core/src/index/ScalarIndexSort-inl.h
index 8c581a335..1f503f3b4 100644
--- a/internal/core/src/index/ScalarIndexSort-inl.h
+++ b/internal/core/src/index/ScalarIndexSort-inl.h
@@ -127,7 +127,7 @@ ScalarIndexSort<T>::Upload(const Config& config) {
     BinarySet ret;
     for (auto& file : remote_paths_to_size) {
         auto abs_file_path = file.first;
-        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/") + 1), nullptr, file.second);
+        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/\\") + 1), nullptr, file.second);
     }
 
     return ret;
diff --git a/internal/core/src/index/StringIndexMarisa.cpp b/internal/core/src/index/StringIndexMarisa.cpp
index 3ac3071d1..43cd78e0e 100644
--- a/internal/core/src/index/StringIndexMarisa.cpp
+++ b/internal/core/src/index/StringIndexMarisa.cpp
@@ -159,7 +159,7 @@ StringIndexMarisa::Upload(const Config& config) {
     BinarySet ret;
     for (auto& file : remote_paths_to_size) {
         auto abs_file_path = file.first;
-        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/") + 1), nullptr, file.second);
+        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/\\") + 1), nullptr, file.second);
     }
 
     return ret;
diff --git a/internal/core/src/index/Utils.cpp b/internal/core/src/index/Utils.cpp
index 791373f5c..b291f99d3 100644
--- a/internal/core/src/index/Utils.cpp
+++ b/internal/core/src/index/Utils.cpp
@@ -148,22 +148,22 @@ GetFieldDataMetaFromConfig(const Config& config) {
     // set collection id
     auto collection_id = index::GetValueFromConfig<std::string>(config, index::COLLECTION_ID);
     AssertInfo(collection_id.has_value(), "collection id not exist in index config");
-    field_data_meta.collection_id = std::stol(collection_id.value());
+    field_data_meta.collection_id = std::stoll(collection_id.value());
 
     // set partition id
     auto partition_id = index::GetValueFromConfig<std::string>(config, index::PARTITION_ID);
     AssertInfo(partition_id.has_value(), "partition id not exist in index config");
-    field_data_meta.partition_id = std::stol(partition_id.value());
+    field_data_meta.partition_id = std::stoll(partition_id.value());
 
     // set segment id
     auto segment_id = index::GetValueFromConfig<std::string>(config, index::SEGMENT_ID);
     AssertInfo(segment_id.has_value(), "segment id not exist in index config");
-    field_data_meta.segment_id = std::stol(segment_id.value());
+    field_data_meta.segment_id = std::stoll(segment_id.value());
 
     // set field id
     auto field_id = index::GetValueFromConfig<std::string>(config, index::FIELD_ID);
     AssertInfo(field_id.has_value(), "field id not exist in index config");
-    field_data_meta.field_id = std::stol(field_id.value());
+    field_data_meta.field_id = std::stoll(field_id.value());
 
     return field_data_meta;
 }
@@ -174,22 +174,22 @@ GetIndexMetaFromConfig(const Config& config) {
     // set segment id
     auto segment_id = index::GetValueFromConfig<std::string>(config, index::SEGMENT_ID);
     AssertInfo(segment_id.has_value(), "segment id not exist in index config");
-    index_meta.segment_id = std::stol(segment_id.value());
+    index_meta.segment_id = std::stoll(segment_id.value());
 
     // set field id
     auto field_id = index::GetValueFromConfig<std::string>(config, index::FIELD_ID);
     AssertInfo(field_id.has_value(), "field id not exist in index config");
-    index_meta.field_id = std::stol(field_id.value());
+    index_meta.field_id = std::stoll(field_id.value());
 
     // set index version
     auto index_version = index::GetValueFromConfig<std::string>(config, index::INDEX_VERSION);
     AssertInfo(index_version.has_value(), "index_version id not exist in index config");
-    index_meta.index_version = std::stol(index_version.value());
+    index_meta.index_version = std::stoll(index_version.value());
 
     // set index id
     auto build_id = index::GetValueFromConfig<std::string>(config, index::INDEX_BUILD_ID);
     AssertInfo(build_id.has_value(), "build id not exist in index config");
-    index_meta.build_id = std::stol(build_id.value());
+    index_meta.build_id = std::stoll(build_id.value());
 
     return index_meta;
 }
diff --git a/internal/core/src/index/VectorDiskIndex.cpp b/internal/core/src/index/VectorDiskIndex.cpp
index dd20a68f7..8b72cb5a4 100644
--- a/internal/core/src/index/VectorDiskIndex.cpp
+++ b/internal/core/src/index/VectorDiskIndex.cpp
@@ -79,7 +79,7 @@ VectorDiskAnnIndex<T>::Upload(const Config& config) {
     BinarySet ret;
     for (auto& file : remote_paths_to_size) {
         auto abs_file_path = file.first;
-        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/") + 1), nullptr, file.second);
+        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/\\") + 1), nullptr, file.second);
     }
 
     return ret;
diff --git a/internal/core/src/index/VectorMemIndex.cpp b/internal/core/src/index/VectorMemIndex.cpp
index 9c65a13fb..98fc57f2d 100644
--- a/internal/core/src/index/VectorMemIndex.cpp
+++ b/internal/core/src/index/VectorMemIndex.cpp
@@ -62,7 +62,7 @@ VectorMemIndex::Upload(const Config& config) {
     BinarySet ret;
     for (auto& file : remote_paths_to_size) {
         auto abs_file_path = file.first;
-        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/") + 1), nullptr, file.second);
+        ret.Append(abs_file_path.substr(abs_file_path.find_last_of("/\\") + 1), nullptr, file.second);
     }
 
     return ret;
diff --git a/internal/core/src/indexbuilder/CMakeLists.txt b/internal/core/src/indexbuilder/CMakeLists.txt
index cae7415c9..29cef2aa0 100644
--- a/internal/core/src/indexbuilder/CMakeLists.txt
+++ b/internal/core/src/indexbuilder/CMakeLists.txt
@@ -23,6 +23,7 @@ add_library(milvus_indexbuilder SHARED ${INDEXBUILDER_FILES})
 find_library(TBB NAMES tbb)
 set(PLATFORM_LIBS dl)
 if (MSYS)
+find_library(TBB NAMES tbb12)
 set(PLATFORM_LIBS -Wl,--allow-multiple-definition)
 endif ()
 
diff --git a/internal/core/src/segcore/CMakeLists.txt b/internal/core/src/segcore/CMakeLists.txt
index 15d6209b6..db5f081d9 100644
--- a/internal/core/src/segcore/CMakeLists.txt
+++ b/internal/core/src/segcore/CMakeLists.txt
@@ -42,6 +42,7 @@ add_library(milvus_segcore SHARED ${SEGCORE_FILES})
 find_library(TBB NAMES tbb)
 set(PLATFORM_LIBS dl)
 if (MSYS)
+find_library(TBB NAMES tbb12)
 set(PLATFORM_LIBS )
 endif ()
 
diff --git a/internal/core/src/segcore/Utils.cpp b/internal/core/src/segcore/Utils.cpp
index aa7893713..9dd0dd8cf 100644
--- a/internal/core/src/segcore/Utils.cpp
+++ b/internal/core/src/segcore/Utils.cpp
@@ -520,7 +520,7 @@ std::vector<storage::FieldDataPtr>
 LoadFieldDatasFromRemote(std::vector<std::string>& remote_files) {
     auto rcm = storage::RemoteChunkManagerFactory::GetInstance().GetRemoteChunkManager();
     std::sort(remote_files.begin(), remote_files.end(), [](const std::string& a, const std::string& b) {
-        return std::stol(a.substr(a.find_last_of("/") + 1)) < std::stol(b.substr(b.find_last_of("/") + 1));
+        return std::stoll(a.substr(a.find_last_of("/\\") + 1)) < std::stoll(b.substr(b.find_last_of("/\\") + 1));
     });
 
     auto parallel_degree = uint64_t(DEFAULT_FIELD_MAX_MEMORY_LIMIT / FILE_SLICE_SIZE);
diff --git a/internal/core/src/storage/CMakeLists.txt b/internal/core/src/storage/CMakeLists.txt
index 46dd20e3a..a4c20cf27 100644
--- a/internal/core/src/storage/CMakeLists.txt
+++ b/internal/core/src/storage/CMakeLists.txt
@@ -44,6 +44,11 @@ set(STORAGE_FILES
     AliyunCredentialsProvider.cpp
     MemFileManagerImpl.cpp)
 
+if (MSYS)
+    list(REMOVE_ITEM STORAGE_FILES
+        DiskFileManagerImpl.cpp)
+endif (MSYS)
+
 add_library(milvus_storage SHARED ${STORAGE_FILES})
 
 find_package(Boost REQUIRED COMPONENTS filesystem)
@@ -51,7 +56,7 @@ find_package(Boost REQUIRED COMPONENTS filesystem)
 if ( LINUX OR APPLE )
     target_link_libraries(milvus_storage PUBLIC milvus_common Boost::filesystem aws-cpp-sdk-core aws-cpp-sdk-s3 google_cloud_cpp_storage google_cloud_cpp_common google_cloud_cpp_rest_internal pthread)
 elseif ( MSYS )
-    message(FATAL_ERROR "Unsupported platform!" )
+    target_link_libraries(milvus_storage PUBLIC milvus_common Boost::filesystem aws-cpp-sdk-core aws-cpp-sdk-s3 aws-crt-cpp pthread)
 endif ()
 
 if(NOT CMAKE_INSTALL_PREFIX)
diff --git a/internal/core/src/storage/DataCodec.cpp b/internal/core/src/storage/DataCodec.cpp
index 703383afb..c09319d90 100644
--- a/internal/core/src/storage/DataCodec.cpp
+++ b/internal/core/src/storage/DataCodec.cpp
@@ -65,7 +65,7 @@ DeserializeRemoteFileData(BinlogReaderPtr reader) {
             index_meta.field_id = data_meta.field_id;
             auto& extras = descriptor_event.event_data.extras;
             AssertInfo(extras.find(INDEX_BUILD_ID_KEY) != extras.end(), "index build id not exist");
-            index_meta.build_id = std::stol(extras[INDEX_BUILD_ID_KEY]);
+            index_meta.build_id = std::stoll(extras[INDEX_BUILD_ID_KEY]);
             index_data->set_index_meta(index_meta);
             index_data->SetTimestamps(index_event_data.start_timestamp, index_event_data.end_timestamp);
             return index_data;
diff --git a/internal/core/src/storage/DiskFileManagerImpl.cpp b/internal/core/src/storage/DiskFileManagerImpl.cpp
index 96126d7f4..2209817e1 100644
--- a/internal/core/src/storage/DiskFileManagerImpl.cpp
+++ b/internal/core/src/storage/DiskFileManagerImpl.cpp
@@ -35,7 +35,9 @@ DiskFileManagerImpl::DiskFileManagerImpl(const FieldDataMeta& field_mata,
                                          const IndexMeta& index_meta,
                                          const StorageConfig& storage_config)
     : FileManagerImpl(field_mata, index_meta) {
-    rcm_ = std::make_unique<MinioChunkManager>(storage_config);
+    if (storage_config.storage_type == "minio") {
+        rcm_ = std::make_unique<MinioChunkManager>(storage_config);
+    }
 }
 
 DiskFileManagerImpl::DiskFileManagerImpl(const FieldDataMeta& field_mata,
@@ -159,13 +161,18 @@ DiskFileManagerImpl::CacheIndexToDisk(std::vector<std::string> remote_files) {
     }
 
     auto EstimateParalleDegree = [&](const std::string& file) -> uint64_t {
-        auto fileSize = rcm_->Size(file);
+        size_t fileSize = 0;
+        if (rcm_) {
+            fileSize = rcm_->Size(file);
+        } else {
+            fileSize = LocalChunkManager::GetInstance().Size(file);
+        }
         return uint64_t(DEFAULT_FIELD_MAX_MEMORY_LIMIT / fileSize);
     };
 
     for (auto& slices : index_slices) {
         auto prefix = slices.first;
-        auto local_index_file_name = GetLocalIndexObjectPrefix() + prefix.substr(prefix.find_last_of("/") + 1);
+        auto local_index_file_name = GetLocalIndexObjectPrefix() + prefix.substr(prefix.find_last_of("/\\") + 1);
         local_chunk_manager.CreateFile(local_index_file_name);
         int64_t offset = 0;
         std::vector<std::string> batch_remote_files;
@@ -216,7 +223,7 @@ DiskFileManagerImpl::CacheBatchIndexFilesToDisk(const std::vector<std::string>&
 std::string
 DiskFileManagerImpl::CacheRawDataToDisk(std::vector<std::string> remote_files) {
     std::sort(remote_files.begin(), remote_files.end(), [](const std::string& a, const std::string& b) {
-        return std::stol(a.substr(a.find_last_of("/") + 1)) < std::stol(b.substr(b.find_last_of("/") + 1));
+        return std::stoll(a.substr(a.find_last_of("/\\") + 1)) < std::stoll(b.substr(b.find_last_of("/\\") + 1));
     });
 
     auto segment_id = GetFieldDataMeta().segment_id;
diff --git a/internal/core/src/storage/FileManager.h b/internal/core/src/storage/FileManager.h
index 7f458a3d5..a1031ab6f 100644
--- a/internal/core/src/storage/FileManager.h
+++ b/internal/core/src/storage/FileManager.h
@@ -21,6 +21,7 @@
 #include <memory>
 
 #include "common/Consts.h"
+#include "config/ConfigChunkManager.h"
 #include "knowhere/common/FileManager.h"
 #include "storage/ChunkManager.h"
 #include "storage/Types.h"
@@ -110,9 +111,14 @@ class FileManagerImpl : public knowhere::FileManager {
 
     virtual std::string
     GetRemoteIndexObjectPrefix() const {
-        return rcm_->GetRemoteRootPath() + "/" + std::string(INDEX_ROOT_PATH) + "/" +
-               std::to_string(index_meta_.build_id) + "/" + std::to_string(index_meta_.index_version) + "/" +
-               std::to_string(field_meta_.partition_id) + "/" + std::to_string(field_meta_.segment_id);
+        if (rcm_) {
+            return rcm_->GetRemoteRootPath() + "/" + std::string(INDEX_ROOT_PATH) + "/" +
+                std::to_string(index_meta_.build_id) + "/" + std::to_string(index_meta_.index_version) + "/" +
+                std::to_string(field_meta_.partition_id) + "/" + std::to_string(field_meta_.segment_id);
+        }
+        return ChunkMangerConfig::GetLocalRootPath() + "/" + std::string(INDEX_ROOT_PATH) + "/" +
+            std::to_string(index_meta_.build_id) + "/" + std::to_string(index_meta_.index_version) + "/" +
+            std::to_string(field_meta_.partition_id) + "/" + std::to_string(field_meta_.segment_id);
     }
 
  protected:
diff --git a/internal/core/src/storage/LocalChunkManager.cpp b/internal/core/src/storage/LocalChunkManager.cpp
index 4842e5d9b..f26947fad 100644
--- a/internal/core/src/storage/LocalChunkManager.cpp
+++ b/internal/core/src/storage/LocalChunkManager.cpp
@@ -97,6 +97,8 @@ LocalChunkManager::Read(const std::string& filepath, uint64_t offset, void* buf,
 void
 LocalChunkManager::Write(const std::string& absPathStr, void* buf, uint64_t size) {
     std::ofstream outfile;
+    boost::filesystem::path absPath(absPathStr);
+    boost::filesystem::create_directories(absPath.parent_path());
     outfile.open(absPathStr, std::ios_base::binary);
     if (outfile.fail()) {
         std::stringstream err_msg;
@@ -113,6 +115,8 @@ LocalChunkManager::Write(const std::string& absPathStr, void* buf, uint64_t size
 void
 LocalChunkManager::Write(const std::string& absPathStr, uint64_t offset, void* buf, uint64_t size) {
     std::ofstream outfile;
+    boost::filesystem::path absPath(absPathStr);
+    boost::filesystem::create_directories(absPath.parent_path());
     outfile.open(absPathStr, std::ios_base::in | std::ios_base::out | std::ios_base::binary);
     if (outfile.fail()) {
         std::stringstream err_msg;
diff --git a/internal/core/src/storage/MemFileManagerImpl.cpp b/internal/core/src/storage/MemFileManagerImpl.cpp
index 2bff8995d..9f23be4f0 100644
--- a/internal/core/src/storage/MemFileManagerImpl.cpp
+++ b/internal/core/src/storage/MemFileManagerImpl.cpp
@@ -26,7 +26,9 @@ MemFileManagerImpl::MemFileManagerImpl(const FieldDataMeta& field_mata,
                                        const IndexMeta& index_meta,
                                        const StorageConfig& storage_config)
     : FileManagerImpl(field_mata, index_meta) {
-    rcm_ = std::make_unique<MinioChunkManager>(storage_config);
+    if (storage_config.storage_type == "minio") {
+        rcm_ = std::make_unique<MinioChunkManager>(storage_config);
+    }
 }
 
 MemFileManagerImpl::MemFileManagerImpl(const FieldDataMeta& field_mata,
@@ -92,7 +94,7 @@ MemFileManagerImpl::LoadIndexToMemory(std::vector<std::string> remote_files) {
     auto LoadBatchIndexFiles = [&]() {
         auto index_datas = GetObjectData(rcm_.get(), batch_files);
         for (size_t idx = 0; idx < batch_files.size(); ++idx) {
-            auto file_name = batch_files[idx].substr(batch_files[idx].find_last_of("/") + 1);
+            auto file_name = batch_files[idx].substr(batch_files[idx].find_last_of("/\\") + 1);
             file_to_index_data[file_name] = index_datas[idx];
         }
     };
@@ -118,7 +120,7 @@ MemFileManagerImpl::LoadIndexToMemory(std::vector<std::string> remote_files) {
 std::vector<FieldDataPtr>
 MemFileManagerImpl::CacheRawDataToMemory(std::vector<std::string> remote_files) {
     std::sort(remote_files.begin(), remote_files.end(), [](const std::string& a, const std::string& b) {
-        return std::stol(a.substr(a.find_last_of("/") + 1)) < std::stol(b.substr(b.find_last_of("/") + 1));
+        return std::stoll(a.substr(a.find_last_of("/\\") + 1)) < std::stoll(b.substr(b.find_last_of("/\\") + 1));
     });
 
     auto parallel_degree = uint64_t(DEFAULT_FIELD_MAX_MEMORY_LIMIT / FILE_SLICE_SIZE);
diff --git a/internal/core/src/storage/MinioChunkManager.cpp b/internal/core/src/storage/MinioChunkManager.cpp
index d85a851c7..657064e42 100644
--- a/internal/core/src/storage/MinioChunkManager.cpp
+++ b/internal/core/src/storage/MinioChunkManager.cpp
@@ -33,6 +33,11 @@
 #include "exceptions/EasyAssert.h"
 #include "log/Log.h"
 
+#if __MINGW32__
+#undef GetMessage
+#undef GetObject
+#endif
+
 #define THROWS3ERROR(FUNCTION)                                                                         \
     do {                                                                                               \
         auto& err = outcome.GetError();                                                                \
diff --git a/internal/core/src/storage/MinioChunkManager.h b/internal/core/src/storage/MinioChunkManager.h
index decf38da5..8d77a26f5 100644
--- a/internal/core/src/storage/MinioChunkManager.h
+++ b/internal/core/src/storage/MinioChunkManager.h
@@ -26,8 +26,10 @@
 #include <aws/core/http/HttpRequest.h>
 #include <aws/core/http/HttpTypes.h>
 #include <aws/core/http/URI.h>
+#ifdef BUILD_GCP
 #include <aws/core/http/curl/CurlHttpClient.h>
 #include <aws/core/http/standard/StandardHttpRequest.h>
+#endif // BUILD_GCP
 #include <aws/s3/S3Client.h>
 
 #include "config/ConfigChunkManager.h"
diff --git a/internal/core/src/storage/RemoteChunkManagerFactory.h b/internal/core/src/storage/RemoteChunkManagerFactory.h
index d4d9bfb6f..e93c298de 100644
--- a/internal/core/src/storage/RemoteChunkManagerFactory.h
+++ b/internal/core/src/storage/RemoteChunkManagerFactory.h
@@ -47,7 +47,8 @@ class RemoteChunkManagerFactory {
         if (rcm_ == nullptr) {
             switch (storage_type) {
                 case ChunkManagerType::Local: {
-                    PanicInfo("unsupported");  // TODO ::
+                    // PanicInfo("unsupported");  // TODO ::
+                    break;
                 }
                 case ChunkManagerType::Minio: {
                     rcm_ = std::make_shared<MinioChunkManager>(storage_config);
diff --git a/internal/core/src/storage/Util.cpp b/internal/core/src/storage/Util.cpp
index 7cd6afb10..659307570 100644
--- a/internal/core/src/storage/Util.cpp
+++ b/internal/core/src/storage/Util.cpp
@@ -22,6 +22,9 @@
 #include "config/ConfigChunkManager.h"
 #include "storage/FieldData.h"
 #include "storage/parquet_c.h"
+#include "storage/FieldDataFactory.h"
+#include "storage/LocalChunkManager.h"
+#include "storage/MemFileManagerImpl.h"
 #include "storage/ThreadPool.h"
 #include "storage/MemFileManagerImpl.h"
 #include "storage/FieldDataFactory.h"
@@ -354,9 +357,13 @@ CreateFileManager(IndexType index_type,
 
 std::unique_ptr<DataCodec>
 DownloadAndDecodeRemoteFile(RemoteChunkManager* remote_chunk_manager, std::string file) {
-    auto fileSize = remote_chunk_manager->Size(file);
+    ChunkManager *chunk_manager = remote_chunk_manager;
+    if (! chunk_manager) {
+        chunk_manager = &LocalChunkManager::GetInstance();
+    }
+    auto fileSize = chunk_manager->Size(file);
     auto buf = std::shared_ptr<uint8_t[]>(new uint8_t[fileSize]);
-    remote_chunk_manager->Read(file, buf.get(), fileSize);
+    chunk_manager->Read(file, buf.get(), fileSize);
 
     return DeserializeFileData(buf, fileSize);
 }
@@ -376,7 +383,11 @@ EncodeAndUploadIndexSlice(RemoteChunkManager* remote_chunk_manager,
     auto serialized_index_data = indexData->serialize_to_remote_file();
     auto serialized_index_size = serialized_index_data.size();
 
-    remote_chunk_manager->Write(object_key, serialized_index_data.data(), serialized_index_size);
+    ChunkManager *chunk_manager = remote_chunk_manager;
+    if (! chunk_manager) {
+        chunk_manager = &LocalChunkManager::GetInstance();
+    }
+    chunk_manager->Write(object_key, serialized_index_data.data(), serialized_index_size);
     return std::pair<std::string, size_t>(object_key, serialized_index_size);
 }
 
diff --git a/internal/core/thirdparty/aws_sdk/CMakeLists.txt b/internal/core/thirdparty/aws_sdk/CMakeLists.txt
index 75c3220f6..d325f008f 100644
--- a/internal/core/thirdparty/aws_sdk/CMakeLists.txt
+++ b/internal/core/thirdparty/aws_sdk/CMakeLists.txt
@@ -33,6 +33,11 @@ macro(build_aws_sdk_s3)
         set(AWS_SDK_S3_CMAKE_ARGS ${AWS_SDK_S3_CMAKE_ARGS} "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
     endif()
 
+    if ( MSYS )
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DAWS_IO_EXPORTS -DAWS_CRT_CPP_EXPORTS")
+        set(AWS_SDK_S3_CMAKE_ARGS ${AWS_SDK_S3_CMAKE_ARGS} "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")
+    endif()
+
     ExternalProject_Add(aws_sdk_s3_ep
 
         GIT_REPOSITORY https://github.com/aws/aws-sdk-cpp.git
@@ -47,6 +52,8 @@ macro(build_aws_sdk_s3)
         BUILD_COMMAND ${AWS_SDK_BUILD_COMMAND}
         INSTALL_COMMAND ${AWS_SDK_INSTALL_COMMAND}
         CMAKE_ARGS ${AWS_SDK_S3_CMAKE_ARGS}
+        # If want build with mingw, need to patch the source code
+        # PATCH_COMMAND patch -p1 < ${CMAKE_SOURCE_DIR}/../../../patches/aws-sdk-1.9.234.patch
     )
 
     add_library(aws-cpp-sdk-core SHARED IMPORTED)
@@ -55,6 +62,11 @@ macro(build_aws_sdk_s3)
         IMPORTED_GLOBAL TRUE
         IMPORTED_LOCATION ${AWS_SDK_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}aws-cpp-sdk-core${CMAKE_SHARED_LIBRARY_SUFFIX}
         INTERFACE_INCLUDE_DIRECTORIES ${AWS_SDK_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR})
+    if ( MSYS )
+        set_target_properties(aws-cpp-sdk-core
+            PROPERTIES
+            IMPORTED_IMPLIB ${AWS_SDK_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}aws-cpp-sdk-core${CMAKE_SHARED_LIBRARY_SUFFIX}.a)
+    endif ()
     add_dependencies(aws-cpp-sdk-core aws_sdk_s3_ep)
 
     add_library(aws-cpp-sdk-s3 SHARED IMPORTED)
@@ -63,6 +75,11 @@ macro(build_aws_sdk_s3)
         IMPORTED_GLOBAL TRUE
         IMPORTED_LOCATION ${AWS_SDK_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}aws-cpp-sdk-s3${CMAKE_SHARED_LIBRARY_SUFFIX}
         INTERFACE_INCLUDE_DIRECTORIES ${AWS_SDK_INSTALL_PREFIX}/${CMAKE_INSTALL_INCLUDEDIR})
+    if ( MSYS )
+        set_target_properties(aws-cpp-sdk-s3
+            PROPERTIES
+            IMPORTED_IMPLIB ${AWS_SDK_INSTALL_PREFIX}/${CMAKE_INSTALL_BINDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}aws-cpp-sdk-s3${CMAKE_SHARED_LIBRARY_SUFFIX}.a)
+    endif ()
     add_dependencies(aws-cpp-sdk-s3 aws_sdk_s3_ep)
 
     # add_library(aws-cpp-sdk-sts SHARED IMPORTED)
diff --git a/internal/core/thirdparty/knowhere/CMakeLists.txt b/internal/core/thirdparty/knowhere/CMakeLists.txt
index b025c37e0..7d3de4777 100644
--- a/internal/core/thirdparty/knowhere/CMakeLists.txt
+++ b/internal/core/thirdparty/knowhere/CMakeLists.txt
@@ -52,6 +52,7 @@ macro(build_knowhere)
             PREFIX          ${CMAKE_BINARY_DIR}/3rdparty_download/knowhere-subbuild
             BINARY_DIR      knowhere-bin
             INSTALL_DIR     ${KNOWHERE_INSTALL_PREFIX}
+            PATCH_COMMAND   patch -p1 < ${CMAKE_SOURCE_DIR}/../../../patches/knowhere-v1.3.15.patch
             )
 
     ExternalProject_Get_Property(knowhere_ep INSTALL_DIR)
diff --git a/internal/util/etcd/etcd_server.go b/internal/util/etcd/etcd_server.go
index 75f81c43e..ffd758812 100644
--- a/internal/util/etcd/etcd_server.go
+++ b/internal/util/etcd/etcd_server.go
@@ -1,6 +1,9 @@
 package etcd
 
 import (
+	"net/url"
+	"os"
+	"runtime"
 	"sync"
 
 	"github.com/milvus-io/milvus/internal/log"
@@ -45,6 +48,12 @@ func InitEtcdServer(
 			} else {
 				cfg = embed.NewConfig()
 			}
+			if runtime.GOOS == "windows" {
+				err := zap.RegisterSink("winfile", newWinFileSink)
+				if err != nil {
+					initError = err
+				}
+			}
 			cfg.Dir = dataDir
 			cfg.LogOutputs = []string{logPath}
 			cfg.LogLevel = logLevel
@@ -73,3 +82,10 @@ func StopEtcdServer() {
 		})
 	}
 }
+
+// special file sink for zap, as etcd using zap as Logger
+// See: https://github.com/uber-go/zap/issues/621
+func newWinFileSink(u *url.URL) (zap.Sink, error) {
+	// e.g. winfile:///D:/test/ -> D:/test/
+	return os.OpenFile(u.Path[1:], os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0600)
+}
diff --git a/internal/util/funcutil/func.go b/internal/util/funcutil/func.go
index 30baeb675..f7a25f805 100644
--- a/internal/util/funcutil/func.go
+++ b/internal/util/funcutil/func.go
@@ -31,7 +31,6 @@ import (
 	"strings"
 	"time"
 
-	"github.com/go-basic/ipv4"
 	"go.uber.org/zap"
 	grpcStatus "google.golang.org/grpc/status"
 
@@ -56,7 +55,16 @@ func CheckGrpcReady(ctx context.Context, targetCh chan error) {
 
 // GetLocalIP return the local ip address
 func GetLocalIP() string {
-	return ipv4.LocalIP()
+	addrs, err := net.InterfaceAddrs()
+	if err == nil {
+		for _, addr := range addrs {
+			ipaddr, ok := addr.(*net.IPNet)
+			if ok && ipaddr.IP.IsGlobalUnicast() && ipaddr.IP.To4() != nil {
+				return ipaddr.IP.String()
+			}
+		}
+	}
+	return "127.0.0.1"
 }
 
 // WaitForComponentStates wait for component's state to be one of the specific states
diff --git a/internal/util/indexcgowrapper/build_index_info.go b/internal/util/indexcgowrapper/build_index_info.go
index bf7bbefe7..3b7a8ea6f 100644
--- a/internal/util/indexcgowrapper/build_index_info.go
+++ b/internal/util/indexcgowrapper/build_index_info.go
@@ -44,7 +44,7 @@ func NewBuildIndexInfo(config *indexpb.StorageConfig) (*BuildIndexInfo, error) {
 	var cBuildIndexInfo C.CBuildIndexInfo
 
 	// TODO::xige-16 support embedded milvus
-	storageType := "minio"
+	storageType := config.StorageType
 	cAddress := C.CString(config.Address)
 	cBucketName := C.CString(config.BucketName)
 	cAccessKey := C.CString(config.AccessKeyID)
diff --git a/internal/util/paramtable/grpc_param.go b/internal/util/paramtable/grpc_param.go
index cbf313dd8..c454a8450 100644
--- a/internal/util/paramtable/grpc_param.go
+++ b/internal/util/paramtable/grpc_param.go
@@ -17,8 +17,8 @@ import (
 	"sync"
 	"time"
 
-	"github.com/go-basic/ipv4"
 	"github.com/milvus-io/milvus/internal/log"
+	"github.com/milvus-io/milvus/internal/util/funcutil"
 	"go.uber.org/zap"
 )
 
@@ -81,7 +81,7 @@ func (p *grpcConfig) init(domain string) {
 
 // LoadFromEnv is used to initialize configuration items from env.
 func (p *grpcConfig) LoadFromEnv() {
-	p.IP = ipv4.LocalIP()
+	p.IP = funcutil.GetLocalIP()
 }
 
 // LoadFromArgs is used to initialize configuration items from args.
diff --git a/scripts/core_build.sh b/scripts/core_build.sh
index db41d3f62..980985d6f 100755
--- a/scripts/core_build.sh
+++ b/scripts/core_build.sh
@@ -243,20 +243,21 @@ case "${unameOut}" in
       fi
     done
     if [ "${llvm_version}" = "NOT_FOUND" ] ; then
-      echo "valid llvm(14 or 15) not installed"
+      echo "llvm@14~15 is not installed"
       exit 1
     fi
     llvm_prefix="$(brew --prefix llvm@${llvm_version})"
     export CLANG_TOOLS_PATH="${llvm_prefix}/bin"
+    export PATH=${CLANG_TOOLS_PATH}:${PATH}
     export CC="${llvm_prefix}/bin/clang"
     export CXX="${llvm_prefix}/bin/clang++"
-    export CFLAGS="-Wno-deprecated-declarations -I$(brew --prefix libomp)/include"
+    export CFLAGS="-Wno-deprecated-declarations -I${llvm_prefix}/include -I/usr/local/include -I$(brew --prefix libomp)/include -I$(brew --prefix boost)/include -I$(brew --prefix tbb)/include"
     export CXXFLAGS=${CFLAGS}
-    export LDFLAGS="-L$(brew --prefix libomp)/lib"
+    export LDFLAGS="-L${llvm_prefix}/lib -L$(brew --prefix libomp)/lib -L$(brew --prefix boost)/lib -L$(brew --prefix tbb)/lib"
     ;;
   Linux*)
     ;;
-  *)   
+  *)
     echo "Cannot build on windows"
     ;;
 esac
diff --git a/scripts/install_deps.sh b/scripts/install_deps.sh
index a5eed150b..bb7f00a65 100755
--- a/scripts/install_deps.sh
+++ b/scripts/install_deps.sh
@@ -29,7 +29,7 @@ function install_linux_deps() {
       sudo yum install -y git make lcov libtool m4 autoconf automake ccache openssl-devel zlib-devel libzstd-devel \
           libcurl-devel python3-devel \
           devtoolset-7-gcc devtoolset-7-gcc-c++ devtoolset-7-gcc-gfortran \
-          llvm-toolset-7.0-clang llvm-toolset-7.0-clang-tools-extra libuuid-devel pulseaudio-libs-devel 
+          llvm-toolset-7.0-clang llvm-toolset-7.0-clang-tools-extra libuuid-devel pulseaudio-libs-devel
 
       echo "source scl_source enable devtoolset-7" | sudo tee -a /etc/profile.d/devtoolset-7.sh
       echo "source scl_source enable llvm-toolset-7.0" | sudo tee -a /etc/profile.d/llvm-toolset-7.sh
@@ -56,16 +56,9 @@ function install_linux_deps() {
 }
 
 function install_mac_deps() {
-  sudo xcode-select --install > /dev/null 2>&1
-  brew install libomp ninja cmake llvm@15 ccache grep
-  export PATH="/usr/local/opt/grep/libexec/gnubin:$PATH"
-  brew update && brew upgrade && brew cleanup
-
-  if [[ $(arch) == 'arm64' ]]; then
-    brew install openssl
-    brew install librdkafka
-    brew install pkg-config
-  fi
+  sudo xcode-select --install  > /dev/null 2>&1
+  brew install boost libomp ninja tbb openblas cmake llvm@15 ccache pkg-config zstd openssl librdkafka
+  brew install grep
 }
 
 if ! command -v go &> /dev/null
diff --git a/scripts/install_deps_msys.sh b/scripts/install_deps_msys.sh
index a08296010..c1d8bde66 100644
--- a/scripts/install_deps_msys.sh
+++ b/scripts/install_deps_msys.sh
@@ -11,6 +11,10 @@ pacmanInstall()
 {
   pacman -S --noconfirm --needed \
     git make tar dos2unix zip unzip patch \
+    mingw-w64-x86_64-arrow \
+    mingw-w64-x86_64-aws-c-http \
+    mingw-w64-x86_64-aws-c-s3 \
+    mingw-w64-x86_64-aws-sdk-cpp \
     mingw-w64-x86_64-toolchain \
     mingw-w64-x86_64-make \
     mingw-w64-x86_64-ccache \
@@ -22,11 +26,10 @@ pacmanInstall()
     mingw-w64-x86_64-clang-tools-extra \
     mingw-w64-x86_64-python2 \
     mingw-w64-x86_64-diffutils \
-    mingw-w64-x86_64-arrow \
-    mingw-w64-x86_64-go \
     mingw-w64-x86_64-zstd
-  pacman -U --noconfirm \
-    https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-rocksdb-6.26.1-1-any.pkg.tar.zst
+  pacman -U --noconfirm --needed \
+    https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-rocksdb-6.26.1-1-any.pkg.tar.zst \
+    https://repo.msys2.org/mingw/mingw64/mingw-w64-x86_64-go-1.18-2-any.pkg.tar.zst
 }
 
 updateKey()
diff --git a/scripts/setenv.sh b/scripts/setenv.sh
index 577683dfb..08a80abe3 100644
--- a/scripts/setenv.sh
+++ b/scripts/setenv.sh
@@ -42,6 +42,7 @@ case "${unameOut}" in
       export RPATH=$LD_LIBRARY_PATH;;
     Darwin*)    
       export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$ROOT_DIR/internal/core/output/lib/pkgconfig"
+      export PKG_CONFIG_PATH="${PKG_CONFIG_PATH}:$(brew --prefix openssl)/lib/pkgconfig"
       export DYLD_LIBRARY_PATH=$ROOT_DIR/internal/core/output/lib
       export RPATH=$DYLD_LIBRARY_PATH;;
     MINGW*)          
-- 
2.39.2 (Apple Git-143)

