diff --git a/go.mod b/go.mod
index 10b7f730f..6f29a1ae2 100644
--- a/go.mod
+++ b/go.mod
@@ -18,7 +18,6 @@ require (
 	github.com/confluentinc/confluent-kafka-go v1.9.1
 	github.com/containerd/cgroups v1.0.2
 	github.com/gin-gonic/gin v1.7.7
-	github.com/go-basic/ipv4 v1.0.0
 	github.com/gofrs/flock v0.8.1
 	github.com/golang/protobuf v1.5.2
 	github.com/google/btree v1.0.1
diff --git a/go.sum b/go.sum
index 0069189c1..01cc61310 100644
--- a/go.sum
+++ b/go.sum
@@ -221,8 +221,6 @@ github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE
 github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
 github.com/gin-gonic/gin v1.7.7 h1:3DoBmSbJbZAWqXJC3SLjAPfutPJJRN1U5pALB7EeTTs=
 github.com/gin-gonic/gin v1.7.7/go.mod h1:axIBovoeJpVj8S3BwE0uPMTeReE4+AfFtqpqaZ1qq1U=
-github.com/go-basic/ipv4 v1.0.0 h1:gjyFAa1USC1hhXTkPOwBWDPfMcUaIM+tvo1XzV9EZxs=
-github.com/go-basic/ipv4 v1.0.0/go.mod h1:etLBnaxbidQfuqE6wgZQfs38nEWNmzALkxDZe4xY8Dg=
 github.com/go-fonts/dejavu v0.1.0/go.mod h1:4Wt4I4OU2Nq9asgDCteaAaWZOV24E+0/Pwo0gppep4g=
 github.com/go-fonts/latin-modern v0.2.0/go.mod h1:rQVLdDMK+mK1xscDwsqM5J8U2jrRa3T0ecnM9pNujks=
 github.com/go-fonts/liberation v0.1.1/go.mod h1:K6qoJYypsmfVjWg8KOVDQhLc8UDgIK2HYqyqAO9z7GY=
diff --git a/internal/core/CMakeLists.txt b/internal/core/CMakeLists.txt
index eb1f727d2..ec6193d0d 100644
--- a/internal/core/CMakeLists.txt
+++ b/internal/core/CMakeLists.txt
@@ -25,6 +25,11 @@ endif ()
 
 add_definitions(-DELPP_THREAD_SAFE)
 set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+
+if ( MSYS )
+    add_definitions(-DPROTOBUF_USE_DLLS)
+endif ()
+
 message( STATUS "Building using CMake version: ${CMAKE_VERSION}" )
 
 project(core)
diff --git a/internal/core/src/indexbuilder/CMakeLists.txt b/internal/core/src/indexbuilder/CMakeLists.txt
index cae7415c9..29cef2aa0 100644
--- a/internal/core/src/indexbuilder/CMakeLists.txt
+++ b/internal/core/src/indexbuilder/CMakeLists.txt
@@ -23,6 +23,7 @@ add_library(milvus_indexbuilder SHARED ${INDEXBUILDER_FILES})
 find_library(TBB NAMES tbb)
 set(PLATFORM_LIBS dl)
 if (MSYS)
+find_library(TBB NAMES tbb12)
 set(PLATFORM_LIBS -Wl,--allow-multiple-definition)
 endif ()
 
diff --git a/internal/core/src/segcore/CMakeLists.txt b/internal/core/src/segcore/CMakeLists.txt
index 1b58ab37b..c85dffb50 100644
--- a/internal/core/src/segcore/CMakeLists.txt
+++ b/internal/core/src/segcore/CMakeLists.txt
@@ -41,6 +41,7 @@ add_library(milvus_segcore SHARED ${SEGCORE_FILES})
 find_library(TBB NAMES tbb)
 set(PLATFORM_LIBS dl)
 if (MSYS)
+find_library(TBB NAMES tbb12)
 set(PLATFORM_LIBS )
 endif ()
 
diff --git a/internal/util/etcd/etcd_server.go b/internal/util/etcd/etcd_server.go
index 75f81c43e..ffd758812 100644
--- a/internal/util/etcd/etcd_server.go
+++ b/internal/util/etcd/etcd_server.go
@@ -1,6 +1,9 @@
 package etcd
 
 import (
+	"net/url"
+	"os"
+	"runtime"
 	"sync"
 
 	"github.com/milvus-io/milvus/internal/log"
@@ -45,6 +48,12 @@ func InitEtcdServer(
 			} else {
 				cfg = embed.NewConfig()
 			}
+			if runtime.GOOS == "windows" {
+				err := zap.RegisterSink("winfile", newWinFileSink)
+				if err != nil {
+					initError = err
+				}
+			}
 			cfg.Dir = dataDir
 			cfg.LogOutputs = []string{logPath}
 			cfg.LogLevel = logLevel
@@ -73,3 +82,10 @@ func StopEtcdServer() {
 		})
 	}
 }
+
+// special file sink for zap, as etcd using zap as Logger
+// See: https://github.com/uber-go/zap/issues/621
+func newWinFileSink(u *url.URL) (zap.Sink, error) {
+	// e.g. winfile:///D:/test/ -> D:/test/
+	return os.OpenFile(u.Path[1:], os.O_WRONLY|os.O_APPEND|os.O_CREATE, 0600)
+}
diff --git a/internal/util/funcutil/func.go b/internal/util/funcutil/func.go
index 53edf7b0a..e12eb43f2 100644
--- a/internal/util/funcutil/func.go
+++ b/internal/util/funcutil/func.go
@@ -31,7 +31,6 @@ import (
 	"strings"
 	"time"
 
-	"github.com/go-basic/ipv4"
 	"go.uber.org/zap"
 	grpcStatus "google.golang.org/grpc/status"
 
@@ -56,7 +55,16 @@ func CheckGrpcReady(ctx context.Context, targetCh chan error) {
 
 // GetLocalIP return the local ip address
 func GetLocalIP() string {
-	return ipv4.LocalIP()
+	addrs, err := net.InterfaceAddrs()
+	if err == nil {
+		for _, addr := range addrs {
+			ipaddr, ok := addr.(*net.IPNet)
+			if ok && ipaddr.IP.IsGlobalUnicast() && ipaddr.IP.To4() != nil {
+				return ipaddr.IP.String()
+			}
+		}
+	}
+	return "127.0.0.1"
 }
 
 // WaitForComponentStates wait for component's state to be one of the specific states
diff --git a/internal/util/paramtable/grpc_param.go b/internal/util/paramtable/grpc_param.go
index af684ed69..6736c4645 100644
--- a/internal/util/paramtable/grpc_param.go
+++ b/internal/util/paramtable/grpc_param.go
@@ -17,8 +17,8 @@ import (
 	"sync"
 	"time"
 
-	"github.com/go-basic/ipv4"
 	"github.com/milvus-io/milvus/internal/log"
+	"github.com/milvus-io/milvus/internal/util/funcutil"
 	"go.uber.org/zap"
 )
 
@@ -81,7 +81,7 @@ func (p *grpcConfig) init(domain string) {
 
 // LoadFromEnv is used to initialize configuration items from env.
 func (p *grpcConfig) LoadFromEnv() {
-	p.IP = ipv4.LocalIP()
+	p.IP = funcutil.GetLocalIP()
 }
 
 // LoadFromArgs is used to initialize configuration items from args.
