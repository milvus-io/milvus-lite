diff --git a/CMakeLists.txt b/CMakeLists.txt
index bd495fcd..a46918b0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -97,7 +97,7 @@ find_package(nlohmann_json REQUIRED)
 find_package(glog REQUIRED)
 find_package(prometheus-cpp REQUIRED)
 find_package(fmt REQUIRED)
-find_package(opentelemetry-cpp REQUIRED)
+# find_package(opentelemetry-cpp REQUIRED)
 
 set(CMAKE_CXX_STANDARD 17)
 set(CMAKE_OSX_DEPLOYMENT_TARGET
@@ -171,17 +171,17 @@ if(NOT WITH_LIGHT)
 endif()
 list(APPEND KNOWHERE_LINKER_LIBS fmt::fmt-header-only)
 list(APPEND KNOWHERE_LINKER_LIBS Folly::folly)
-if(NOT WITH_LIGHT)
-  list(APPEND KNOWHERE_LINKER_LIBS opentelemetry-cpp::opentelemetry_trace)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_ostream_span)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_jaeger_trace)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_otlp_grpc)
-  list(APPEND KNOWHERE_LINKER_LIBS
-       opentelemetry-cpp::opentelemetry_exporter_otlp_http)
-endif()
+# if(NOT WITH_LIGHT)
+#   list(APPEND KNOWHERE_LINKER_LIBS opentelemetry-cpp::opentelemetry_trace)
+#   list(APPEND KNOWHERE_LINKER_LIBS
+#        opentelemetry-cpp::opentelemetry_exporter_ostream_span)
+#   list(APPEND KNOWHERE_LINKER_LIBS
+#        opentelemetry-cpp::opentelemetry_exporter_jaeger_trace)
+#   list(APPEND KNOWHERE_LINKER_LIBS
+#        opentelemetry-cpp::opentelemetry_exporter_otlp_grpc)
+#   list(APPEND KNOWHERE_LINKER_LIBS
+#        opentelemetry-cpp::opentelemetry_exporter_otlp_http)
+# endif()
 
 add_library(knowhere SHARED ${KNOWHERE_SRCS})
 add_dependencies(knowhere ${KNOWHERE_LINKER_LIBS})
diff --git a/include/knowhere/tracer.h b/include/knowhere/tracer.h
index 11d5681b..4065bb13 100644
--- a/include/knowhere/tracer.h
+++ b/include/knowhere/tracer.h
@@ -11,16 +11,42 @@
 
 #pragma once
 
+#include <any>
 #include <memory>
 #include <string>
 
 #include "knowhere/config.h"
+#ifndef MILVUS_LITE
 #include "opentelemetry/trace/provider.h"
+#endif
 
 #define TRACE_SERVICE_KNOWHERE "knowhere"
 
 namespace knowhere::tracer {
 
+#ifdef MILVUS_LITE
+
+namespace trace {
+class Span {
+ public:
+    void
+    End() {
+    }
+    void
+    SetAttribute(const char* a, std::any b) {
+    }
+};
+class Tracer {
+ public:
+    static int
+    WithActiveSpan(std::shared_ptr<Span>& span) noexcept {
+        return 0;
+    }
+};
+
+};  // namespace trace
+#endif
+
 struct TraceConfig {
     std::string exporter;
     float sampleFraction;
@@ -36,7 +62,10 @@ struct TraceContext {
     const uint8_t* spanID = nullptr;
     uint8_t traceFlags = 0;
 };
+
+#ifndef MILVUS_LITE
 namespace trace = opentelemetry::trace;
+#endif
 
 void
 initTelemetry(const TraceConfig& cfg);
diff --git a/src/common/tracer.cc b/src/common/tracer.cc
index 99daf00a..9864e62d 100644
--- a/src/common/tracer.cc
+++ b/src/common/tracer.cc
@@ -13,10 +13,13 @@
 
 #include <iomanip>
 #include <iostream>
+#include <memory>
 #include <sstream>
 #include <utility>
 
 #include "knowhere/log.h"
+
+#ifndef MILVUS_LITE
 #include "opentelemetry/exporters/jaeger/jaeger_exporter_factory.h"
 #include "opentelemetry/exporters/ostream/span_exporter_factory.h"
 #include "opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h"
@@ -29,9 +32,12 @@
 #include "opentelemetry/sdk/version/version.h"
 #include "opentelemetry/trace/span_context.h"
 #include "opentelemetry/trace/span_metadata.h"
+#endif
 
 namespace knowhere::tracer {
 
+#ifndef MILVUS_LITE
+
 namespace trace = opentelemetry::trace;
 namespace nostd = opentelemetry::nostd;
 
@@ -143,6 +149,65 @@ EmptySpanID(const TraceContext* ctx) {
     return isEmptyID(ctx->spanID, trace::SpanId::kSize);
 }
 
+tracer::TraceContext
+GetTraceCtxFromCfg(const BaseConfig* cfg) {
+    auto trace_id = cfg->trace_id.value();
+    auto span_id = cfg->span_id.value();
+    auto trace_flags = cfg->trace_flags.value();
+    return tracer::TraceContext{trace_id.data(), span_id.data(), (uint8_t)trace_flags};
+}
+#endif
+
+#ifdef MILVUS_LITE
+void
+initTelemetry(const TraceConfig& cfg) {
+}
+
+std::shared_ptr<trace::Tracer>
+GetTracer() {
+    return std::make_shared<trace::Tracer>();
+}
+
+std::shared_ptr<trace::Span>
+StartSpan(const std::string& name, TraceContext* parentCtx) {
+    return std::make_shared<trace::Span>();
+}
+
+thread_local std::shared_ptr<trace::Span> local_span;
+void
+SetRootSpan(std::shared_ptr<trace::Span> span) {
+}
+
+void
+CloseRootSpan() {
+}
+
+void
+AddEvent(const std::string& event_label) {
+}
+
+bool
+isEmptyID(const uint8_t* id, int length) {
+    if (id != nullptr) {
+        for (int i = 0; i < length; i++) {
+            if (id[i] != 0) {
+                return false;
+            }
+        }
+    }
+    return true;
+}
+
+bool
+EmptyTraceID(const TraceContext* ctx) {
+    return true;
+}
+
+bool
+EmptySpanID(const TraceContext* ctx) {
+    return true;
+}
+
 tracer::TraceContext
 GetTraceCtxFromCfg(const BaseConfig* cfg) {
     auto trace_id = cfg->trace_id.value();
@@ -151,4 +216,5 @@ GetTraceCtxFromCfg(const BaseConfig* cfg) {
     return tracer::TraceContext{trace_id.data(), span_id.data(), (uint8_t)trace_flags};
 }
 
+#endif
 }  // namespace knowhere::tracer
